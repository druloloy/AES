{"mappings":"MAAMA,gBACWC,EAAY,GAAIC,EAAU,CACnCC,IAAM,GAAKC,OAAOC,YAAY,IAC9BC,QAAU,EACVC,UAAY,EACZC,OAAQC,SAQR,OANAC,KAAKP,IAAMD,EAAQC,IACnBO,KAAKT,UAAYA,EACjBS,KAAKJ,QAAUJ,EAAQI,QACvBI,KAAKH,UAAYL,EAAQK,UACzBG,KAAKF,OAASN,EAAQM,OAEdE,KAAKJ,SACT,IAAK,UACDI,MAAKC,IACL,MAEJ,IAAK,UACDD,MAAKE,IACL,cAEA,MAAM,IAAIC,MAAM,uCAI5BC,GAAiB,GAEjBH,KACI,MAAMI,EAASX,OAAOY,eAAeN,KAAKH,UAAWG,KAAKP,IAAKO,KAAKF,QACpE,IAAIS,EAAYF,EAAOG,OAAOR,KAAKT,UAAW,OAAQ,OACtDgB,GAAaF,EAAOI,MAAM,OAC1BT,MAAKI,EAAiBG,EAE1BL,KACI,MAAMQ,EAAWhB,OAAOY,eAAeN,KAAKH,UAAWG,KAAKP,IAAKO,KAAKF,QACtE,IAAIa,EAAYD,EAASF,OAAOR,KAAKT,UAAW,MAAO,QACvDoB,GAAaD,EAASD,MAAM,QAC5BT,MAAKI,EAAiBO,EAE1BC,eACI,OAAOZ,KAAKT,UAEhBsB,mBACI,OAAOb,MAAKI,GAIpB,MAAMU,IAAMf,OAAOgB,KAAK,mEAAoE,OAC5FC,OAASjB,OAAOgB,KAAK,mCAAoC,OAEnDE,aAAY,KAAA,CACdC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,cAC9BE,OAAQH,SAASC,cAAc,eAC/B5B,QAAS2B,SAASI,iBAAiB,iBACnCC,WAAYL,SAASC,cAAc,iBAGjCnB,QAAO,KACT,MAAMwB,EAAWR,eACXS,EAAOD,EAASJ,MAAMM,MAQtBpB,EADM,IAAIjB,IAAIoC,EANJ,CACZjC,IAAKqB,IACLlB,QAAS,UACTC,UAAW,cACXC,OAAQkB,SAGUH,mBACtBY,EAASH,OAAOK,MAAQpB,GAGtBL,QAAO,KACT,MAAMuB,EAAWR,eACXS,EAAOD,EAASJ,MAAMM,MAQtBhB,EADM,IAAIrB,IAAIoC,EANJ,CACZjC,IAAKqB,IACLlB,QAAS,UACTC,UAAW,cACXC,OAAQkB,SAGUH,mBACtBY,EAASH,OAAOK,MAAQhB,GAItBiB,KAAI,KACNC,OAAOC,iBAAiB,QAAM,KAC1BZ,KAAKY,iBAAiB,UAAWC,IAC7BA,EAAEC,iBACF,MAAMP,EAAWR,eACbQ,EAASjC,QAAQ,GAAGyC,QACpBhC,UACKwB,EAASjC,QAAQ,GAAGyC,SACzB/B,iBAPZ2B,OAAOC,iBAAiB,QAAM,KAC1BZ,KAAKY,iBAAiB,UAAWC,IAC7BA,EAAEC,iBACF,MAAMP,EAAWR,eACbQ,EAASjC,QAAQ,GAAGyC,QACpBhC,UACKwB,EAASjC,QAAQ,GAAGyC,SACzB/B","sources":["scripts/app.js"],"sourcesContent":["class AES{\n    constructor( plainText = '', options = {\n        key : '' | crypto.randomBytes(32),\n        process : 'encrypt' | 'decrypt',\n        algorithm : 'aes-256-gcm' | 'aes-192-gcm' | 'aes-128-gcm',\n        vector: Buffer\n    }){\n        this.key = options.key;\n        this.plainText = plainText;\n        this.process = options.process;\n        this.algorithm = options.algorithm;\n        this.vector = options.vector;\n\n        switch (this.process) {\n            case 'encrypt':\n                this.#encrypt();\n                break;\n        \n            case 'decrypt':\n                this.#decrypt();\n                break;\n            default:\n                throw new Error('process must be encrypt or decrypt');  \n        }\n    }\n\n    #processedText = '';\n    \n    #encrypt(){\n        const cipher = crypto.createCipheriv(this.algorithm, this.key, this.vector);\n        let encrypted = cipher.update(this.plainText, 'utf8', 'hex');\n        encrypted += cipher.final('hex');\n        this.#processedText = encrypted;\n    }\n    #decrypt(){\n        const decipher = crypto.createCipheriv(this.algorithm, this.key, this.vector);\n        let decrypted = decipher.update(this.plainText, 'hex', 'utf8');\n        decrypted += decipher.final('utf8');\n        this.#processedText = decrypted;\n    }\n    getPlainText(){\n        return this.plainText;\n    }\n    getProcessedText(){\n        return this.#processedText;\n    }\n}\n\nconst KEY = Buffer.from('ae1b499c2a1a60224789468a80f4b5525ee235e9a423deee28dbb6fecd2236ce', 'hex'),\nVECTOR = Buffer.from('d158e282d71af2c636ea7da5303a256e', 'hex');\n\nconst initElements = () => ({\n    form: document.querySelector('#form'),\n    input: document.querySelector('#inputText'),\n    output: document.querySelector('#outputText'),\n    options: document.querySelectorAll('[name=option]'),\n    processBtn: document.querySelector('#processBtn')\n})\n\nconst encrypt = () => {\n    const Elements = initElements();\n    const text = Elements.input.value;\n    const options = {\n        key: KEY,\n        process: 'encrypt',\n        algorithm: 'aes-256-gcm',\n        vector: VECTOR\n    }\n    const aes = new AES(text, options);\n    const encrypted = aes.getProcessedText();\n    Elements.output.value = encrypted;\n};\n\nconst decrypt = () => {\n    const Elements = initElements();\n    const text = Elements.input.value;\n    const options = {\n        key: KEY,\n        process: 'decrypt',\n        algorithm: 'aes-256-gcm',\n        vector: VECTOR\n    }\n    const aes = new AES(text, options);\n    const decrypted = aes.getProcessedText();\n    Elements.output.value = decrypted;\n};\n\n\nconst main = () => {\n    window.addEventListener('load', () => {\n        form.addEventListener('submit', (e) => {\n            e.preventDefault();\n            const Elements = initElements();\n            if (Elements.options[0].checked)\n                encrypt();\n            else if (Elements.options[1].checked)\n                decrypt();\n        });\n    })\n}\n\nmain();"],"names":["AES","plainText","options","key","crypto","randomBytes","process","algorithm","vector","Buffer","this","encrypt","decrypt","Error","processedText","cipher","createCipheriv","encrypted","update","final","decipher","decrypted","getPlainText","getProcessedText","KEY","from","VECTOR","initElements","form","document","querySelector","input","output","querySelectorAll","processBtn","Elements","text","value","main","window","addEventListener","e","preventDefault","checked"],"version":3,"file":"index.f85e0b7b.js.map"}